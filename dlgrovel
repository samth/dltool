#!/usr/bin/env guile
-*- scheme -*-
!#
;; dlgrovel
;; Copyright (C) 2012 Andy Wingo <wingo@igalia.com>

;; This library is free software; you can redistribute it and/or modify
;; it under the terms of the GNU Lesser General Public License as
;; published by the Free Software Foundation; either version 3 of the
;; License, or (at your option) any later version.
;;                                                                  
;; This library is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.
;;                                                                  
;; You should have received a copy of the GNU Lesser General Public
;; License along with this program; if not, contact:
;;
;; Free Software Foundation           Voice:  +1-617-542-5942
;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;; Boston, MA  02111-1307,  USA       gnu@gnu.org

(define-module (dlgrovel)
  #:use-module (ice-9 getopt-long)
  #:use-module (ice-9 command-line)
  #:use-module (ice-9 match)
  #:use-module (ice-9 pretty-print)
  #:use-module (ice-9 binary-ports)
  #:use-module (system repl error-handling)
  #:use-module (dlhacks)
  #:use-module (dlhacks elf)
  #:use-module (dlhacks dwarf))

(define *option-grammar*
  '((help (single-char #\h))
    (version (single-char #\v))
    (debug)))

(define (display-version)
  (version-etc "dlgrovel"
               "0.1.0"
               #:copyright-holder "Andy Wingo <wingo@igalia.com>"
               #:command-name "dlgrovel"
               #:license *LGPLv3+*))

(define* (display-usage #:optional (port (current-output-port)))
  (display "Usage: dlgrovel [--help] [--version] LIB SYM...\n" port))

(define (help args)
  (display-usage)
  (display "Grovel a library for debugging information.

dlgrovel loads the ELF shared library LIB, and find its associated
debugging information, possibly in a separate file.  If LIB is a bare
file name, without a slash, it is searched for in the load path.  The
load path is found by parsing the /etc/ld.so.conf file and the
LD_LIBRARY_PATH environment variable.

Many GNU/Linux distributions strip the debugging information out their
libraries, and instead offer that information in separate \"-dbg\"
packages.  In that case, the loadable .so file has a link to the
separate debug object.  This tool will load separate debug objects, if
needed.

If dlgrovel is passed one or more SYM names, declarations of all those
symbols are printed on the console.  Otherwise dlgrovel prints
declarations for all exported symbols.
")
  (emit-bug-reporting-address "dlgrovel" "wingo@igalia.com"
                              #:url "https://gitorious.org/guile-dlhacks/"))

(define (load-elf file)
  (parse-elf (call-with-input-file file get-bytevector-all)))

(define (all-exports lib-path)
  (sort (map elf-symbol-name (extract-exported-symbols (load-elf lib-path)))
        string<?))

(define (load-debug lib-path)
  (let ((dbg (find-debug-object lib-path)))
    (unless dbg
      (error "No debugging symbols for library" lib-path))
    (read-debuginfo
     (elf->dwarf-context (load-elf dbg) 0 0))))

(define (dlgrovel lib names)
  (let* ((lib-path (if (string-index lib #\/)
                       lib
                       (find-library lib))))
    (unless lib-path
      (error "Failed to find library" lib))
    (extract-definitions (if (null? names)
                             (all-exports lib-path)
                             names)
                         (load-debug lib-path))))

(define (main args)
  (setlocale LC_ALL "")
  (let* ((options (getopt-long args *option-grammar*
                               #:stop-at-first-non-option #t))
         (args (option-ref options '() '())))
    (cond
     ((option-ref options 'help #f)
      (help args))
     ((option-ref options 'version #f)
      (display-version))
     (else
      (match args
        ((lib . syms)
         (call-with-error-handling
          (lambda ()
            (for-each pretty-print (dlgrovel lib syms)))
          #:on-error (cond
                      ((option-ref options 'debug #f) 'debug)
                      (else 'report))
          #:post-error (lambda args (exit 1))))
        (else
         (display-usage (current-error-port))
         (exit 1)))))
    (exit 0)))

(main (program-arguments))
